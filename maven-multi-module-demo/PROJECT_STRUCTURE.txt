Maven多模块项目结构（支持本地lib依赖）
=================================================================

maven-multi-module-demo/
│
├── 📄 pom.xml                                    根POM - 定义所有模块
│   └─> modules: common, service-a, module-group
│
├── 📚 文档文件
│   ├── README.md                                 主要说明文档（从这里开始）
│   ├── JENKINS_GUIDE.md                          Jenkins完整配置指南
│   ├── USAGE_EXAMPLE.md                          实际使用示例
│   ├── SUMMARY.md                                项目总结
│   └── PROJECT_STRUCTURE.txt                     本文件
│
├── 🔧 工具脚本
│   ├── test-build.sh                             Linux/Mac构建测试
│   └── test-build.bat                            Windows构建测试
│
├── 📦 common/ ─────────────────────────────────── 公共模块（核心）
│   │
│   ├── 📄 pom.xml                                公共模块POM
│   │   ├─> 配置maven-install-plugin
│   │   ├─> 定义对lib/*.jar的依赖
│   │   └─> Spring Boot Starter依赖
│   │
│   ├── 📄 pom-with-local-jar-example.xml        完整配置示例
│   │
│   ├── 📁 lib/ ─────────────────────────────────  本地jar存放目录（关键）
│   │   ├── 📄 README.md                          lib使用说明
│   │   ├── 📄 install-libs.sh                    手动安装脚本（Linux/Mac）
│   │   ├── 📄 install-libs.bat                   手动安装脚本（Windows）
│   │   └── 📦 [你的jar文件放这里]
│   │       └─> 例如：commons-lang3-3.8.1.jar
│   │
│   └── 📁 src/
│       └── main/java/com/example/common/
│           └── 📄 CommonUtil.java                公共工具类
│               └─> 可以使用lib中jar的功能
│
├── 📦 service-a/ ──────────────────────────────── 子项目A（直接在根下）
│   │
│   ├── 📄 pom.xml                                Service-A POM
│   │   ├─> 依赖：common模块
│   │   ├─> 依赖：Spring Boot Web
│   │   └─> 自动获得common的lib依赖
│   │
│   └── 📁 src/
│       └── main/
│           ├── java/com/example/servicea/
│           │   ├── 📄 ServiceAApplication.java   Spring Boot主类
│           │   └── controller/
│           │       └── 📄 TestController.java    测试控制器
│           │           └─> 使用CommonUtil
│           │
│           └── resources/
│               └── 📄 application.yml            配置（端口8081）
│
└── 📁 module-group/ ───────────────────────────── 模块组（嵌套结构示例）
    │
    ├── 📄 pom.xml                                模块组POM（中间层）
    │   └─> modules: service-b
    │
    └── 📦 service-b/ ──────────────────────────── 嵌套子项目B
        │
        ├── 📄 pom.xml                            Service-B POM
        │   ├─> 父POM：module-group
        │   ├─> 依赖：common模块
        │   └─> 自动获得common的lib依赖
        │
        └── 📁 src/
            └── main/
                ├── java/com/example/serviceb/
                │   ├── 📄 ServiceBApplication.java   Spring Boot主类
                │   └── controller/
                │       └── 📄 TestController.java    测试控制器
                │           └─> 使用CommonUtil
                │
                └── resources/
                    └── 📄 application.yml        配置（端口8082）


依赖关系图
=================================================================

┌─────────────────────────────────────────────────────────────┐
│                     根POM (maven-multi-module-demo)           │
│                                                               │
│  定义：                                                        │
│  - 统一版本管理                                               │
│  - Spring Boot依赖管理                                        │
│  - 编译插件配置                                               │
└───────────────┬─────────────────────────────────────────────┘
                │
        ┌───────┴────────┬──────────────┐
        ▼                ▼              ▼
   ┌────────┐      ┌──────────┐   ┌──────────────┐
   │ common │      │service-a │   │module-group  │
   └────┬───┘      └────┬─────┘   └──────┬───────┘
        │               │                 │
        │               │                 ▼
        │               │          ┌──────────┐
        │               │          │service-b │
        │               │          └────┬─────┘
        │               │               │
        │               └───────┬───────┘
        │                       │
        │                   依赖common
        │                       │
        ▼                       ▼
   ┌─────────────────────────────────┐
   │   common模块提供：                │
   │   - CommonUtil工具类             │
   │   - lib/*.jar的功能              │
   │   - Spring Boot基础依赖          │
   └─────────────────────────────────┘


构建流程图
=================================================================

开始构建: mvn clean install
        │
        ▼
┌─────────────────────────────────────────┐
│ Phase 1: validate                       │
│ ┌─────────────────────────────────────┐ │
│ │ maven-install-plugin 执行            │ │
│ │ - 读取 common/lib/*.jar              │ │
│ │ - 安装到本地Maven仓库                │ │
│ │ - 生成POM文件                        │ │
│ └─────────────────────────────────────┘ │
└─────────────────┬───────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────┐
│ Phase 2: compile                        │
│ ┌─────────────────────────────────────┐ │
│ │ 编译 common 模块                     │ │
│ │ - 使用已安装的lib/*.jar              │ │
│ │ - 编译CommonUtil.java                │ │
│ └─────────────────────────────────────┘ │
└─────────────────┬───────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────┐
│ Phase 3: package                        │
│ ┌─────────────────────────────────────┐ │
│ │ 打包 common.jar                      │ │
│ └─────────────────────────────────────┘ │
└─────────────────┬───────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────┐
│ Phase 4: install                        │
│ ┌─────────────────────────────────────┐ │
│ │ 安装 common.jar 到本地仓库           │ │
│ └─────────────────────────────────────┘ │
└─────────────────┬───────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────┐
│ 编译 service-a                          │
│ - 依赖 common.jar                       │
│ - 自动获得lib依赖                       │
└─────────────────┬───────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────┐
│ 编译 service-b                          │
│ - 依赖 common.jar                       │
│ - 自动获得lib依赖                       │
└─────────────────┬───────────────────────┘
                  │
                  ▼
            构建成功 ✓


Jenkins流水线流程
=================================================================

┌─────────────────────────────────────────────────────────┐
│ Jenkins Job                                             │
└───────────────────┬─────────────────────────────────────┘
                    │
                    ▼
┌─────────────────────────────────────────────────────────┐
│ Step 1: Checkout from Git                              │
│ - 拉取整个代码仓库                                      │
│ - 包含 common/lib/ 目录和所有jar文件                    │
└───────────────────┬─────────────────────────────────────┘
                    │
                    ▼
┌─────────────────────────────────────────────────────────┐
│ Step 2: Build (mvn clean install)                      │
│                                                         │
│ 自动执行：                                              │
│ 1. validate阶段                                         │
│    └─> lib/*.jar → Jenkins本地Maven仓库                │
│                                                         │
│ 2. compile阶段                                          │
│    └─> 编译所有模块                                     │
│                                                         │
│ 3. test阶段                                             │
│    └─> 运行测试                                         │
│                                                         │
│ 4. package阶段                                          │
│    └─> 打包所有模块                                     │
└───────────────────┬─────────────────────────────────────┘
                    │
                    ▼
┌─────────────────────────────────────────────────────────┐
│ Step 3: Archive Artifacts                              │
│ - 归档 service-a/target/*.jar                          │
│ - 归档 service-b/target/*.jar                          │
└───────────────────┬─────────────────────────────────────┘
                    │
                    ▼
              部署/发布 ✓


关键路径说明
=================================================================

1. 本地jar存放
   common/lib/your-jar.jar

2. Maven安装插件配置
   common/pom.xml
   └─> maven-install-plugin
       └─> file: ${project.basedir}/lib/your-jar.jar

3. 依赖声明
   common/pom.xml
   └─> <dependencies>
       └─> your-jar

4. 子项目依赖
   service-a/pom.xml
   service-b/pom.xml
   └─> <dependency>
       └─> common模块

5. 构建时路径解析
   Jenkins workspace: /var/jenkins/workspace/your-job/
   └─> common/lib/your-jar.jar
       └─> ${project.basedir} 自动解析为绝对路径


常用命令速查
=================================================================

# 完整构建
mvn clean install

# 只编译不测试
mvn clean compile -DskipTests

# 只打包不测试
mvn clean package -DskipTests

# 查看依赖树
cd service-a
mvn dependency:tree

# 查看有效POM
mvn help:effective-pom

# 详细日志
mvn clean install -X

# 只构建特定模块
mvn clean install -pl common -am          # 只构建common及其依赖
mvn clean install -pl service-a -am       # 只构建service-a及其依赖

# 跳过测试
mvn clean install -DskipTests

# 强制更新依赖
mvn clean install -U


端口配置
=================================================================

Service-A:  http://localhost:8081
  └─> /api/hello
  └─> /api/format?message=test

Service-B:  http://localhost:8082
  └─> /api/hello
  └─> /api/format?message=test


文件大小和行数（参考）
=================================================================

README.md                 ~400行   详细说明
JENKINS_GUIDE.md          ~800行   Jenkins配置
USAGE_EXAMPLE.md          ~600行   使用示例
SUMMARY.md                ~400行   项目总结
common/lib/README.md      ~150行   Lib使用说明

总文档量：约 2,350行


版本信息
=================================================================

Java:          1.8
Spring Boot:   2.7.18
Maven:         3.6+
构建工具:      Maven
